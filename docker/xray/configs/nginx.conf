# load_module             modules/ngx_stream_js_module.so;
# load_module             modules/ngx_http_js_module.so;
load_module             modules/ngx_stream_module.so;

user                    nginx;
worker_processes        auto;
worker_cpu_affinity     auto;

error_log               /var/log/nginx/error.log notice;
pid                     /var/run/nginx.pid;

events {
    worker_connections  10240;
}

worker_rlimit_nofile    20480;

http {

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # 获取真实IP的设置
    set_real_ip_from    unix:;
    # real_ip_header      X-Real-IP;
    real_ip_header      X-Forwarded-For;
    real_ip_recursive   on;

    # 获取真实IP的设置
    map $http_cf_connecting_ip $real_client_ip {
        default $http_cf_connecting_ip;
        ""      $remote_addr;
    }

    add_header          X-Content-Type-Options nosniff;

    # SSL相关参数请自行调整
    ssl_session_cache          shared:SSL:16m;
    ssl_session_timeout        1h;
    ssl_session_tickets        off;
    ssl_protocols              TLSv1.3 TLSv1.2;
    ssl_ciphers                TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
    ssl_prefer_server_ciphers  on;
    ssl_stapling               on;
    ssl_stapling_verify        on;
    resolver                   1.1.1.1 8.8.8.8 valid=60s;
    resolver_timeout           2s;

    # 映射请求头
    map $real_client_ip $proxy_forwarded_elem {
        ~^[0-9.]+$        "for=$real_client_ip";
        ~^[0-9A-Fa-f:.]+$ "for=\"[$real_client_ip]\"";
        default           "for=unknown";
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ""      close;
    }

    # 映射关系表，用于定义 grpc header 中的某些变量（可自行调整）
    map $remote_addr $proxy_forwarded_elem {
        ~^[0-9.]+$        "for=$remote_addr";
        ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";
        default           "for=unknown";
    }

    map $http_forwarded $proxy_add_forwarded {
        "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";
        default "$proxy_forwarded_elem";
    }

    #创建自定义变量 $client_ip 获取客户端真实 IP，其配置如下：
    map $http_x_forwarded_for $client_ip {
        "" $remote_addr;
        "~*(?P<firstAddr>([0-9a-f]{0,4}:){1,7}[0-9a-f]{1,4}|([0-9]{1,3}\.){3}[0-9]{1,3})$" $firstAddr;
    }

    log_format http_json escape=json
    '{'
        '"time_local": "$time_local",'
        '"host": "$host",'
        '"client_ip": "$client_ip",'
        '"remote_addr": "$remote_addr",'
        '"remote_user": "$remote_user",'
        '"request_method": "$request_method",'
        '"ssl_server_name": "$ssl_server_name",'
        '"uri": "$uri",'
        '"server_protocol": "$server_protocol",'
        '"request": "$request",'
        '"status": "$status",'
        '"body_bytes_sent": "$body_bytes_sent",'
        '"request_time": "$request_time",'
        '"http_referrer": "$http_referer",'
        '"http_user_agent": "$http_user_agent",'
        '"upstream_addr": "$upstream_addr",'
        '"upstream_response_time": "$upstream_response_time",'
        '"upstream_connect_time": "$upstream_connect_time",'
        '"upstream_status": "$upstream_status",'
        '"http_x_forwarded_for": "$http_x_forwarded_for"'
    '}';

    access_log  /var/log/nginx/http-access.log http_json;
    log_not_found  off;

    # 优化参数
    server_tokens off;
    sendfile      on;
    tcp_nodelay   on;
    tcp_nopush    on;

    # 缓存
    client_body_buffer_size      128k;
    client_max_body_size         0;
    client_header_buffer_size    128k;
    large_client_header_buffers  4 128k;
    output_buffers               1 128k;
    postpone_output              1460;

    # 配置http版本
    proxy_http_version 1.1;

    # 配置缓存大小，关闭磁盘缓存读写减少I/O
    proxy_buffering            on;
    proxy_buffer_size          32k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
    proxy_buffers              512 4k;
    proxy_busy_buffers_size    128k; #高负荷下缓冲大小（proxy_buffers*2）
    proxy_temp_file_write_size 512k; #设定缓存文件大小，大于这个值，将从upstream服务器传
    proxy_cache_lock           on;
    proxy_cache_lock_timeout   200ms;
    proxy_temp_path            /etc/nginx/proxy_temp;
    proxy_cache_path           /etc/nginx/proxy_cache levels=1:2 keys_zone=my_cache:100m max_size=300m inactive=1d;
    proxy_max_temp_file_size   0;
    proxy_connect_timeout      30;
    proxy_read_timeout         5m;

    client_header_timeout      3m;
    client_body_timeout        3m;
    send_timeout               3m;

    # 配置代理服务器 Http 状态缓存时间
    proxy_cache_valid          200 302 10m;
    proxy_cache_valid          301 1h;
    proxy_cache_valid          any 1m;

    # 优化网络传输数据包
    gzip              on;
    gzip_min_length   1k;
    gzip_buffers      16 16k;
    gzip_http_version 1.0;
    gzip_proxied      any;
    gzip_comp_level   3;
    gzip_types        text/plain text/css application/json application/x-javascript text/javascript text/xml application/xml;
    gzip_vary         on;
    gzip_disable      "MSIE [1-6]\.(?!.*SV1)";

    open_file_cache max=102400 inactive=20s;
    open_file_cache_valid 80s;
    open_file_cache_min_uses 1;

    include /etc/nginx/conf.d/*.conf;
}

stream {
    log_format tcp_json escape=json
    '{'
        '"time_local":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"protocol":"$protocol",'
        '"status": "$status",'
        '"bytes_sent":"$bytes_sent",'
        '"bytes_received":"$bytes_received",'
        '"session_time":"$session_time",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_session_time":"$upstream_session_time",'
        '"upstream_bytes_sent": "$upstream_bytes_sent",'
        '"upstream_bytes_received": "$upstream_bytes_received",'
        '"upstream_connect_time": "$upstream_connect_time"'
    '}';

    access_log /var/log/nginx/tcp-access.log tcp_json;

    include /etc/nginx/stream.d/*.conf;
}
