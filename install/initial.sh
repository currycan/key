#!/usr/bin/env bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

set -e

#检查系统
check_sys(){
    if [[ -f /etc/redhat-release ]]; then
        release="centos"
    elif cat /etc/issue | grep -q -E -i "debian"; then
        release="debian"
    elif cat /etc/issue | grep -q -E -i "ubuntu"; then
        release="ubuntu"
    elif cat /etc/issue | grep -q -E -i "centos|red hat|redhat"; then
        release="centos"
    elif cat /proc/version | grep -q -E -i "debian"; then
        release="debian"
    elif cat /proc/version | grep -q -E -i "ubuntu"; then
        release="ubuntu"
    elif cat /proc/version | grep -q -E -i "centos|red hat|redhat"; then
        release="centos"
    fi
}

#检查Linux版本
check_version(){
    if [[ -s /etc/redhat-release ]]; then
        version=`grep -oE  "[0-9.]+" /etc/redhat-release | cut -d . -f 1`
    else
        version=`grep -oE  "[0-9.]+" /etc/issue | cut -d . -f 1`
    fi
    bit=`uname -m`
    if [[ ${bit} = "x86_64" ]]; then
        bit="x64"
    else
        bit="x32"
    fi
}

optimizing_system(){
    sudo \curl -SLo /etc/sysctl.conf https://raw.githubusercontent.com/currycan/key/master/sysctl.conf
    sudo \curl -SLo /etc/security/limits.conf https://raw.githubusercontent.com/currycan/key/master/limits.conf
    FLAG_PROFILE=$(sudo grep "ulimit -SHn 1000000" /etc/profile | wc -l)
    if [ FLAG_PROFILE == 0 ];then
        echo "ulimit -SHn 1000000">>/etc/profile
    fi
}

pip_install(){
    if [ $(which pip | wc -l) == 0 ];then
        sudo curl -SLo ./get-pip.py https://bootstrap.pypa.io/get-pip.py
        sudo python get-pip.py
        rm -f get-pip.py
    else
        VERSION=$(pip --version |tr -s ' '| cut -d' ' -f2 | cut -d'.' -f1)
        if [ $VERSION != 19 ];then
            sudo curl -SLo ./get-pip.py https://bootstrap.pypa.io/get-pip.py
            sudo python get-pip.py
            rm -f get-pip.py
        fi
    fi
}

user_init(){
    mkdir -p /app
    FLAG_GROUP=$(grep andrew /etc/group | wc -l)
    if [ $FLAG_GROUP == 0 ];then
        groupadd andrew
    fi
    if [ ! -f /app/andrew/.bashrc ];then
        useradd -m andrew -g andrew -s /bin/bash -d /app/andrew
    fi
}

download_ssh_key(){
    sudo mkdir -p ssh /app/andrew/.ssh/ /root/.ssh/
    sudo curl -SLo ssh/id_rsa.pub https://raw.githubusercontent.com/currycan/key/master/id_rsa.pub
    sudo curl -SLo ssh/authorized_keys https://raw.githubusercontent.com/currycan/key/master/authorized_keys
    sudo cp -a ssh/* /app/andrew/.ssh/
    sudo cp -a ssh/* /root/.ssh/
    sudo chmod 700 /app/andrew/.ssh/
    sudo chmod 600 /app/andrew/.ssh/*
    sudo chown -R andrew:andrew /app/andrew/.ssh/
    sudo chmod -R 600 /root/.ssh/
    sudo chown -R root:root /root/.ssh/
    sudo rm -rf ssh
}

yum_init(){
    sudo yum update -y
    sudo yum install -y sudo vim wget net-tools telnet lrzsz lsof bash-completion epel-release python3 psmisc git
    yum install -y yum-utils device-mapper-persistent-data lvm2
    yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    rpm -Uvh --nodeps --force https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm
    yum install -y docker-ce docker-ce-cli containerd.io
    if [[ ${version} == "8" ]]; then
        ln -sf /usr/bin/python3 /usr/bin/python
    fi
    pip_install
    # pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/
    # pip config set global.trusted-host mirrors.aliyun.com
    pip install -U speedtest-cli
}

apt_init(){
    apt update
    apt upgrade -y
    apt install -y sudo vim wget net-tools telnet lrzsz lsof bash-completion python3 curl psmisc cron git
    apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
    if [[ "${release}" == "ubuntu" ]]; then
      add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    fi
    if [[ "${release}" == "debian" ]]; then
      add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
      curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
    fi
    apt update && apt install -y docker-ce docker-ce-cli containerd.io
    pip_install
    cat << EOF > /usr/bin/pip
#!/usr/bin/python
# GENERATED BY DEBIAN

import sys

# Run the main entry point, similarly to how setuptools does it, but because
# we didn't install the actual entry point from setup.py, don't use the
# pkg_resources API.
from pip import __main__
if __name__ == '__main__':
    sys.exit(__main__._main())
EOF
    # pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/
    # pip config set global.trusted-host mirrors.aliyun.com
    pip install -U speedtest-cli
}

ssh_init(){
    sudo sed -i /etc/ssh/sshd_config -e "s/^[#]*Port.*/Port 38666/g"
    sudo sed -i /etc/ssh/sshd_config -e "s/^PasswordAuthentication.*/PasswordAuthentication yes/g"
    sudo sed -i /etc/ssh/sshd_config -e "s/^#PubkeyAuthentication.*/PubkeyAuthentication yes/g"
    sudo sed -i /etc/ssh/sshd_config -e "s/^[#]*PermitRootLogin.*/PermitRootLogin yes/g"
    sudo \curl -SLo/root/.bashrc https://raw.githubusercontent.com/currycan/key/master/bashrc
    sudo \curl -SLo /app/andrew/.bashrc https://raw.githubusercontent.com/currycan/key/master/bashrc
    chown -R andrew:andrew /app/andrew/.bashrc
}

initial(){
    timedatectl set-timezone Asia/Shanghai
    check_sys
    check_version
    optimizing_system
    user_init
    download_ssh_key
    if [[ "${release}" == "centos" ]]; then
        sudo echo "ZZT520.596msl*18" | passwd --stdin root
        sudo echo "zzt2008zzt" | passwd --stdin andrew
        # chcon -R unconfined_u:object_r:user_home_t:s0 /app/
        yum_init
        FLAG_SUDO=$(grep andrew /etc/sudoers | wc -l)
        if [ $FLAG_SUDO == 0 ];then
            # sudo sed -i '93i  andrew    ALL=(ALL:ALL) NOPASSWD: ALL' /etc/sudoers
            sudo sed -i '101i  %andrew    ALL=(ALL:ALL) NOPASSWD: ALL' /etc/sudoers
        fi
        if [[ ${version} == "6" ]]; then
            echo "centos 6"
        elif [[ ${version} != "6" ]]; then
            sudo systemctl stop firewalld && systemctl disable firewalld
        else
            echo "unkown error"
        fi
        ssh_init
        sudo echo 'export PS1="[\[\e[31;43m\]\[\e[5m\]\u\[\e[0m\]\[\e[37;40m\]@\[\e[32;40m\]\h\[\e[33;40m\] \w\[\e[0m\]]\\$ "' >> ~/.bashrc
        sudo echo 'export PS1="[\u@\h \W]\$"' >> /app/andrew/.bashrc
        sudo sed "s/nofile 6553600/nofile 65536/g" -i /etc/security/limits.conf
        echo "Done~"
    elif [[ "${release}" == "debian" ]] || [[ "${release}" == "ubuntu" ]]; then
        sudo echo "root:ZZT520.596msl*18" | chpasswd
        sudo echo "andrew:zzt2008zzt" | chpasswd
        apt_init
        sudo systemctl stop firewalld && systemctl disable firewalld
        FLAG_SUDO=$(grep andrew /etc/sudoers | wc -l)
        if [ $FLAG_SUDO == 0 ];then
            sudo sed -i '21i  %andrew    ALL=(ALL:ALL) NOPASSWD: ALL' /etc/sudoers
        fi
        ssh_init
        sudo echo 'export PS1="\[\e[31;43m\]\[\e[5m\]\u\[\e[0m\]\[\e[37;40m\]@\[\e[32;40m\]\h\[\e[33;40m\]:\w\[\e[0m\]\\$ "' >> ~/.bashrc
        sudo echo 'export PS1="\u@\h:\w\$ "' >> /app/andrew/.bashrc
        echo "Done~"
    else
        echo "unkown system"
    fi
    COMPOSE_VERSION=`curl -s https://github.com/docker/compose/tags | grep "/docker/compose/releases/tag/" | grep -v "rc" | head -1 | sed -r 's/.*tag\/(.+)\">.*/\1/'`
    curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    curl -L https://raw.githubusercontent.com/docker/docker-ce/master/components/cli/contrib/completion/bash/docker -o /etc/bash_completion.d/docker
    curl -L https://raw.githubusercontent.com/docker/compose/${COMPOSE_VERSION}/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose
    curl -O https://raw.githubusercontent.com/currycan/key/master/ssrkcp/docker-compose.yml
    systemctl enable --now docker
    service sshd restart
    sudo sysctl -p
}

initial | tee initial.log
